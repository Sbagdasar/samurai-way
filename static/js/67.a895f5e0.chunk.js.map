{"version":3,"file":"static/js/67.a895f5e0.chunk.js","mappings":"sNAGaA,EAAuC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,GAAW,YAC1EC,EAAWF,EAAKG,OAASH,EAAKI,QACpC,OACE,iBAAKC,UAAS,UAAKC,EAAAA,EAAAA,YAAL,YAAsBJ,EAAWI,EAAAA,EAAAA,MAAS,IAAxD,WACE,0BACE,uCAAcP,GAAWE,MAGzBC,IAAY,0BAAOF,EAAKG,a,+ECVhC,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCMpMI,EAAkC,SAAC,GAAc,IAAbC,EAAY,EAAZA,KAAMC,EAAM,EAANA,GACnD,OACI,gBAAKJ,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASI,GAAE,mBAAcD,GAAzB,SAAgCD,OCH/BG,EAAqC,SAAC,GAAa,IAAZC,EAAW,EAAXA,QAChD,OACI,0BACI,gBAAKP,UAAWC,EAAhB,SAA4BM,O,uCCFlCC,GAA2BC,EAAAA,EAAAA,GAAiB,KAarCC,GAAsBC,EAAAA,EAAAA,GAAkC,CACnEC,KAAM,cAD2BD,EAZL,SAACf,GAC7B,OACE,0BACE,kBAAMiB,SAAUjB,EAAMkB,aAAtB,WACGC,EAAAA,EAAAA,GAAY,qBAAsB,iBAAiB,CAACC,EAAAA,EAASR,GAA2Bf,EAAAA,EAAU,OACnG,qD,uCC6CR,GAAewB,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAbtB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAM,CACFC,WAAW,SAACf,GACRc,GAASE,EAAAA,EAAAA,GAAgBhB,SAIqDiB,EAAAA,EAAkBC,EAAAA,GAA5G,ECnCuB,SAAC7B,GAEtB,IAAI8B,EAAkB9B,EAAMwB,YAAYO,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC3B,EAAD,CAAuBC,KAAM0B,EAAE1B,KAAMC,GAAIyB,EAAEzB,IAA1ByB,EAAEzB,OACxE0B,EAAmBlC,EAAMwB,YAAYW,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC1B,EAAD,CAAoBC,QAASyB,EAAEzB,SAAjByB,EAAE5B,OAI3E,OACE,iCACE,iBAAKJ,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAEIyB,KAGJ,gBAAK1B,UAAWC,EAAhB,SAEI6B,QAIN,SAACpB,EAAD,CAAqBG,SAjBH,SAACoB,GACrBrC,EAAM0B,WAAWW,EAAOC","sources":["components/Common/forms/formsControls/textarea/Textarea.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Common/forms/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["import React from 'react';\nimport {WrappedFieldProps} from \"redux-form\";\nimport s from '../FormControls.module.css'\nexport const Textarea:React.FC<WrappedFieldProps> = ({ input, meta, ...props}) => {\n  const hasError = meta.error && meta.touched\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error: ''}`}>\n      <div>\n        <textarea {...input} {...props}></textarea>\n      </div>\n      {\n        hasError && <span>{meta.error}</span>\n      }\n    </div>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"dialog\":\"Dialogs_dialog__htSTl\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\ntype DialogItem = {\n    name: string\n    id:number\n}\nexport const DialogItem:React.FC<DialogItem> = ({name, id})=>{\n    return(\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\n        </div>\n    )\n}","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\ntype MessagePropsType = {\n    message: string\n}\n\n\nexport const Message:React.FC<MessagePropsType> = ({message})=>{\n    return(\n        <div>\n            <div className={s.message}>{message}</div>\n\n        </div>\n\n    )\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"./formsControls/textarea/Textarea\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {createField} from \"./formsControls/createField/createField\";\nexport type FormDataAddMessageType={\n  newMessageBody:string\n}\nconst maxLengthCreatorValidate = maxLengthCreator(100)\nexport const AddMessageForm = (props:InjectedFormProps<FormDataAddMessageType>) => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        {createField('Enter your message', \"newMessageBody\",[required,maxLengthCreatorValidate], Textarea, null )}\n        <button>send message</button>\n      </form>\n    </div>\n\n  );\n};\n\nexport const ReduxAddMessageForm = reduxForm<FormDataAddMessageType>({\n  form: 'addMessage'\n})(AddMessageForm)","import React from 'react';\nimport {addNewMessageAC} from \"../../redux/reducers/dialogs-reducer\";\nimport {Dialogs, DialogsPageType} from \"./Dialogs\";\nimport {RootTypeReduxState} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {withRouter} from \"react-router-dom\";\n\n\n/*export const DialogsContainer = (props: DialogsPropsType) => {\n\n    return (\n        <>\n            <StoreContext.Consumer>\n                {\n                    (store)=>{\n                        let state = store.getState()\n\n                        const addMessage=()=> {\n                            store.dispatch(addNewMessageAC())\n                        }\n                        const onChangeMessageHandler=(message: string)=>{\n\n                            store.dispatch(updateNewMessageTextAC(message))\n                        }\n                        return(\n                        <Dialogs dialogsPage={state.dialogsPage} addMessage={addMessage} updateNewMessage={onChangeMessageHandler}/>\n                    )}\n                }\n\n            </StoreContext.Consumer>\n\n        </>\n\n    );\n};*/\n\ntype MapStateToPropsType = {\n    dialogsPage: DialogsPageType\n\n}\ntype MapDispatchToPropsType = {\n    addMessage:(message: string) => void\n}\n\nconst mapStateToProps=(state:RootTypeReduxState):MapStateToPropsType=>{\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nconst mapDispatchToProps=(dispatch: Dispatch):MapDispatchToPropsType=>{\n    return{\n        addMessage:(message: string)=>{\n            dispatch(addNewMessageAC(message))\n        }\n    }\n}\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect, withRouter)(Dialogs)\n","import React from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {FormDataAddMessageType, ReduxAddMessageForm} from \"../Common/forms/AddMessageForm\";\n\ntype DialogType = {\n  id: number\n  name: string\n}\ntype MessageType = {\n  id: number,\n  message: string\n}\nexport type DialogsPageType = {\n  dialogs: Array<DialogType>,\n  messages: Array<MessageType>,\n}\ntype DialogsPropsType = {\n  dialogsPage: DialogsPageType\n  //dispatch:(action:ActionsType)=>void\n  addMessage: (message: string) => void\n  isAuth: boolean\n}\nexport const Dialogs = (props: DialogsPropsType) => {\n\n  let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\n  let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\n  const addNewMessage = (values:FormDataAddMessageType) => {\n    props.addMessage(values.newMessageBody)\n  }\n  return (\n    <>\n      <div className={s.dialogs}>\n        <div className={s.dialogsItems}>\n          {\n            dialogsElements\n          }\n        </div>\n        <div className={s.messages}>\n          {\n            messagesElements\n          }\n        </div>\n      </div>\n      <ReduxAddMessageForm onSubmit={addNewMessage}/>\n    </>\n\n  );\n};\n"],"names":["Textarea","input","meta","props","hasError","error","touched","className","s","DialogItem","name","id","to","Message","message","maxLengthCreatorValidate","maxLengthCreator","ReduxAddMessageForm","reduxForm","form","onSubmit","handleSubmit","createField","required","compose","connect","state","dialogsPage","dispatch","addMessage","addNewMessageAC","withAuthRedirect","withRouter","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","newMessageBody"],"sourceRoot":""}