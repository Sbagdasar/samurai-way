{"version":3,"file":"static/js/445.8f25fc0c.chunk.js","mappings":"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","sources":["components/Common/forms/formsControls/textarea/Textarea.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Profilenfo.module.css?5d32","components/Profile/ProfileStatus/ProfileStatusF.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Common/forms/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React from 'react';\nimport {WrappedFieldProps} from \"redux-form\";\nimport s from '../FormControls.module.css'\nexport const Textarea:React.FC<WrappedFieldProps> = ({ input, meta, ...props}) => {\n  const hasError = meta.error && meta.touched\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error: ''}`}>\n      <div>\n        <textarea {...input} {...props}></textarea>\n      </div>\n      {\n        hasError && <span>{meta.error}</span>\n      }\n    </div>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"content_img\":\"Profilenfo_content_img__a06Vj\",\"descriptionBlock\":\"Profilenfo_descriptionBlock__Uw9A+\",\"profilePhoto\":\"Profilenfo_profilePhoto__yQAgw\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusFType = {\n  status: string\n  updateStatusTC: (status: string) => void\n}\nexport const ProfileStatusF = (props: ProfileStatusFType) => {\n  const [isEditMode, setIsEditMode] = useState(false)\n  const [status, setStatus] = useState(props.status)\n  const activateEditMode = () => {\n    setIsEditMode(true)\n  }\n  const disableActiveMode = () => {\n\n    props.updateStatusTC(status)\n    setIsEditMode(false)\n\n  }\n  const changeStatusValue = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  useEffect(() => {\n    setStatus(props.status)\n  }, [props.status])\n  return (\n    <div>\n      {\n        !isEditMode &&\n          <div>\n              <span onDoubleClick={activateEditMode.bind(this)}>{props.status}</span>\n          </div>\n      }\n      {\n        isEditMode &&\n          <div>\n              <input type=\"text\" autoFocus onChange={changeStatusValue.bind(this)} value={status}\n                     onBlur={disableActiveMode}/>\n          </div>\n      }\n    </div>\n  );\n\n};\n\n","import React from 'react';\nimport s from \"./Profilenfo.module.css\";\nimport {ProfileItemPropsType} from \"../../../redux/reducers/profile-reducer\";\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\nimport defaultImage from '../../../assets/images/usersPage/defaultUser.jpeg'\nimport {ProfileStatusF} from \"../ProfileStatus/ProfileStatusF\";\n\ntype ProfileInfoPropsType={\n    profile:ProfileItemPropsType|null\n    status:string\n    updateStatusTC:(status:string)=>void\n}\nexport const ProfileInfo = (props:ProfileInfoPropsType) => {\n\n    if(!props.profile){\n        return <Preloader/>\n    }else{\n        return (\n            <div>\n                {/*<div>\n                    <img className={s.content_img}\n                         src=\"https://socialprint.com/wp-content/uploads/banner.policies.1920x500.png\" alt=\"\"/>\n                </div>*/}\n                <div className={s.descriptionBlock}>\n                    <div>\n                        <img src={props.profile.photos.small ? props.profile.photos.small : defaultImage}\n                             alt={'props.profile.photos.small'} className={s.profilePhoto}/>\n                    </div>\n                    <ProfileStatusF status={props.status} updateStatusTC={props.updateStatusTC}/>\n                    <div>\n                        <p>{props.profile.aboutMe}</p>\n                        <p>{props.profile.fullName}</p>\n                        <p>{props.profile.lookingForAJobDescription}</p>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n\n\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from \"./Post.module.css\"\n\ntype PostPropsType = {\n    message: string,\n    likeCounts: number\n}\nexport const Post: React.FC<PostPropsType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img\n                src=\"https://i1.sndcdn.com/avatars-000002061067-xtanty-t500x500.jpg\"\n                alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like - {props.likeCounts}</span>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"./formsControls/textarea/Textarea\";\nimport {createField} from \"./formsControls/createField/createField\";\n\nexport type FormDataAddPostFormType = {\n  newPostBody: string\n}\nconst maxLengthCreatorValidate = maxLengthCreator(10)\n\nexport const AddNewPostForm = (props: InjectedFormProps<FormDataAddPostFormType>) => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        {createField('Enter your post text', \"newPostBody\",[required,maxLengthCreatorValidate ] , Textarea, null)}\n\n        <div>\n          <button>add post</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport const ReduxAddNewPostForm = reduxForm<FormDataAddPostFormType>({\n  form: 'addMessage'\n})(AddNewPostForm)","import React from 'react';\nimport s from \"./MyPosts.module.css\"\nimport {Post} from \"./Post/Post\";\nimport {FormDataAddPostFormType, ReduxAddNewPostForm} from \"../../Common/forms/AddNewPostForm\";\n\nexport type PostType = {\n    id: number\n    message: string\n    likeCounts: number\n}\ntype MyPostsPropsType = {\n    posts: Array<PostType>\n    addPost: (newPost:string) => void\n}\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts}/>)\n    const addPost = (values:FormDataAddPostFormType) => {\n        props.addPost(values.newPostBody)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <ReduxAddNewPostForm onSubmit={addPost}/>\n            <div className={s.posts}>\n                {postElement}\n            </div>\n        </div>\n    );\n});","import React from 'react';\n\nimport {addPostActionCreator} from \"../../../redux/reducers/profile-reducer\";\nimport {RootTypeReduxState} from \"../../../redux/redux-store\";\nimport {MyPosts, PostType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from 'redux';\n\n\n// export const MyPostsContainer = (props: MyPostsContainerPropsType) => {\n//\n//     return (\n//         <StoreContext.Consumer>\n//             {(store)=>{\n//                 let state = store.getState()\n//                 const addPost = () => {\n//\n//                     store.dispatch(addPostActionCreator())\n//                 }\n//                 const onChangeHandler = (text:string) => {\n//\n//                  store.dispatch(updateNewPostTextAC(text))\n//                 }\n//                 return (\n//                     <MyPosts posts={state.profilePage.posts}\n//                              newPostText={state.profilePage.newPostText}\n//                              addPost={addPost}\n//                              updateNewPostText={onChangeHandler}\n//                     />\n//                 )\n//\n//             }}\n//         </StoreContext.Consumer>\n//\n//     );\n// };\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n}\ntype MapDispatchToPropsType = {\n    addPost:(newPost:string)=>void,\n}\nconst mapStateToProps=(state:RootTypeReduxState):MapStateToPropsType=>{\n    return {\n        posts: state.profilePage.posts,\n    }\n}\n\nconst mapDispatchToProps=(dispatch: Dispatch):MapDispatchToPropsType=>{\n    return{\n        addPost:(newPost:string)=>{dispatch(addPostActionCreator(newPost))},\n\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileItemPropsType} from \"../../redux/reducers/profile-reducer\";\n\nexport type ProfilePropsType = {\n  profile: ProfileItemPropsType | null\n  //setUserProfile:(profile:ProfileItemPropsType)=>void\n  getProfileTC: (userId: string) => void\n  updateStatusTC: (status: string) => void\n  status: string\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n\n  return (\n    <div>\n      <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}/>\n      <MyPostsContainer/>\n    </div>\n  );\n};\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {RootTypeReduxState} from \"../../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {getProfileTC, getStatusTC, ProfileItemPropsType, updateStatusTC} from \"../../redux/reducers/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type MapStateToPropsType = {\n  profile: ProfileItemPropsType | null\n  status: string\n  authorizedUserId: number | null\n  isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n  //setUserProfile: (profile: ProfileItemPropsType) => void\n  getProfileTC: (userId: string) => void\n  getStatusTC: (userId: string) => void\n  updateStatusTC: (status: string) => void\n}\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype DataContainerComponentType = RouteComponentProps<PathParamsType> & ProfileContainerType\n\nclass ProfileContainer extends React.Component<DataContainerComponentType> {\n  constructor(props: DataContainerComponentType) {\n    super(props);\n  }\n\n  componentDidMount() {\n    let userId = this.props.match.params.userId\n    if (!userId) {\n      userId = this.props.authorizedUserId + ''\n    }\n    this.props.getProfileTC(userId)\n    this.props.getStatusTC(userId)\n  }\n\n  render() {\n\n    return (\n      <Profile {...this.props}/>\n    )\n  }\n};\nconst mapStateToProps = (state: RootTypeReduxState): MapStateToPropsType => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.id,\n  isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\n  getProfileTC,\n  getStatusTC,\n  updateStatusTC\n}), withAuthRedirect, withRouter)(ProfileContainer)\n"],"names":["Textarea","input","meta","props","hasError","error","touched","className","s","ProfileStatusF","useState","isEditMode","setIsEditMode","status","setStatus","useEffect","onDoubleClick","bind","type","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatusTC","ProfileInfo","profile","src","photos","small","defaultImage","alt","aboutMe","fullName","lookingForAJobDescription","Preloader","Post","message","likeCounts","maxLengthCreatorValidate","maxLengthCreator","ReduxAddNewPostForm","reduxForm","form","onSubmit","handleSubmit","createField","required","MyPosts","React","postElement","posts","map","p","id","values","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","dispatch","newPost","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getProfileTC","getStatusTC","compose","auth","isAuth","withAuthRedirect","withRouter"],"sourceRoot":""}