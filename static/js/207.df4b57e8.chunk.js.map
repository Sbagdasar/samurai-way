{"version":3,"file":"static/js/207.df4b57e8.chunk.js","mappings":"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","sources":["components/Common/forms/formsControls/textarea/Textarea.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Profilenfo.module.css?5d32","components/Profile/ProfileInfo/ProfileContacts/Contacts.module.css","components/Profile/ProfileInfo/ProfileContacts/Contacts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Common/forms/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React from 'react';\nimport {WrappedFieldProps} from \"redux-form\";\nimport s from '../FormControls.module.css'\nexport const Textarea:React.FC<WrappedFieldProps> = ({ input, meta, ...props}) => {\n  const hasError = meta.error && meta.touched\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error: ''}`}>\n      <div>\n        <textarea {...input} {...props}></textarea>\n      </div>\n      {\n        hasError && <span>{meta.error}</span>\n      }\n    </div>\n  );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"Profilenfo_profileInfoContainer__VhUgu\",\"descriptionBlock\":\"Profilenfo_descriptionBlock__Uw9A+\",\"imageContainer\":\"Profilenfo_imageContainer__kPXRz\",\"imageBlock\":\"Profilenfo_imageBlock__4DAr1\",\"profilePhoto\":\"Profilenfo_profilePhoto__yQAgw\",\"contactsBlock\":\"Profilenfo_contactsBlock__Gyuev\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport s from './Contacts.module.css'\nimport {ProfileContacts} from \"redux/reducers/profile-reducer\";\ntype ContactsPropsType={\n  contacts: ProfileContacts\n}\nexport const Contacts = ({contacts}: ContactsPropsType) => {\n  return (\n    <div className={s.contactsBlock}>\n      <ul>\n        {\n          Object.entries(contacts).map(item=> {\n            return(\n              <li key={item[0]}>{item[0]}: {item[1] + '1'} </li>\n            )\n          })\n        }\n      </ul>\n\n      </div>\n  );\n};\n\n","import React, {ChangeEvent} from 'react';\nimport s from \"./Profilenfo.module.css\";\nimport {ProfileItemPropsType} from \"../../../redux/reducers/profile-reducer\";\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\nimport defaultImage from '../../../assets/images/usersPage/defaultUser.jpeg'\nimport {ProfileStatusF} from \"../ProfileStatus/ProfileStatusF\";\nimport {Contacts} from \"components/Profile/ProfileInfo/ProfileContacts/Contacts\";\n\ntype ProfileInfoPropsType = {\n  profile: ProfileItemPropsType | null\n  isOwner: boolean\n  saveFile:(file:File)=>void\n}\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n\n  if (!props.profile) {\n    return <Preloader/>\n  }\n\n  const onAvatarChange = (e:ChangeEvent<HTMLInputElement>)=>{\n      if(e.currentTarget.files?.length){\n         props.saveFile(e.currentTarget.files[0])\n      }\n  }\n\n  return (\n    <div className={s.profileInfoContainer}>\n      <div className={s.descriptionBlock}>\n        <div className={s.imageContainer}>\n          <div className={s.imageBlock}>\n            <img src={props.profile.photos.small ? props.profile.photos.small : defaultImage}\n                 alt={'props.profile.photos.small'} className={s.profilePhoto}/>\n            {props.isOwner && <input type={'file'} onChange={onAvatarChange}/>}\n          </div>\n        </div>\n       <Contacts contacts={props.profile.contacts}/>\n      </div>\n    </div>\n  );\n\n\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from \"./Post.module.css\"\n\ntype PostPropsType = {\n    message: string,\n    likeCounts: number\n}\nexport const Post: React.FC<PostPropsType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img\n                src=\"https://i1.sndcdn.com/avatars-000002061067-xtanty-t500x500.jpg\"\n                alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like - {props.likeCounts}</span>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"./formsControls/textarea/Textarea\";\nimport {createField} from \"./formsControls/createField/createField\";\n\nexport type FormDataAddPostFormType = {\n  newPostBody: string\n}\nconst maxLengthCreatorValidate = maxLengthCreator(10)\n\nexport const AddNewPostForm = (props: InjectedFormProps<FormDataAddPostFormType>) => {\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        {createField('Enter your post text', \"newPostBody\",[required,maxLengthCreatorValidate ] , Textarea, null)}\n\n        <div>\n          <button>add post</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport const ReduxAddNewPostForm = reduxForm<FormDataAddPostFormType>({\n  form: 'addMessage'\n})(AddNewPostForm)","import React from 'react';\nimport s from \"./MyPosts.module.css\"\nimport {Post} from \"./Post/Post\";\nimport {FormDataAddPostFormType, ReduxAddNewPostForm} from \"../../Common/forms/AddNewPostForm\";\n\nexport type PostType = {\n    id: number\n    message: string\n    likeCounts: number\n}\ntype MyPostsPropsType = {\n    posts: Array<PostType>\n    addPost: (newPost:string) => void\n}\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts}/>)\n    const addPost = (values:FormDataAddPostFormType) => {\n        props.addPost(values.newPostBody)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n          {/*<ProfileStatusF status={props.status} updateStatusTC={props.updateStatusTC}/>*/}\n          {/*<div>*/}\n          {/*  <p>{props.profile.aboutMe}</p>*/}\n          {/*  <p>{props.profile.fullName}</p>*/}\n          {/*  <p>{props.profile.lookingForAJobDescription}</p>*/}\n          {/*</div>*/}\n            <h3>My posts</h3>\n            <ReduxAddNewPostForm onSubmit={addPost}/>\n            <div className={s.posts}>\n                {postElement}\n            </div>\n        </div>\n    );\n});","import React from 'react';\nimport {MyPosts, PostType} from \"components/Profile/MyPosts/MyPosts\";\nimport {addPostActionCreator, ProfileItemPropsType} from \"redux/reducers/profile-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootTypeReduxState} from \"redux/redux-store\";\n\n\n\ntype MyPostsContainerPropsType = {\n    profile: ProfileItemPropsType | null\n    status: string\n    updateStatusTC: (status: string) => void\n}\n\nexport const MyPostsContainer = (props:MyPostsContainerPropsType) => {\n  const dispatch = useDispatch()\n  const posts = useSelector<RootTypeReduxState, PostType[]>(state => state.profilePage.posts)\n  const addPostHandler = (newPost:string)=>{\n    dispatch(addPostActionCreator(newPost))\n  }\n    return (\n      <div>\n          <MyPosts posts={posts} addPost={addPostHandler}/>\n      </div>\n    );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"Profile_profileContainer__CUA1O\"};","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileItemPropsType} from \"redux/reducers/profile-reducer\";\nimport s from \"./Profile.module.css\"\nexport type ProfilePropsType = {\n  profile: ProfileItemPropsType | null\n  //setUserProfile:(profile:ProfileItemPropsType)=>void\n  getProfileTC: (userId: string) => void\n  updateStatusTC: (status: string) => void\n  status: string\n  isOwner:boolean\n  saveFile:(file:File)=>void\n\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n\n  return (\n    <div className={s.profileContainer}>\n      <ProfileInfo saveFile={props.saveFile} isOwner={props.isOwner} profile={props.profile} />\n      <MyPostsContainer profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}/>\n    </div>\n  );\n};\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {RootTypeReduxState} from \"redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {\n  getProfileTC,\n  getStatusTC,\n  ProfileItemPropsType,\n  saveFileTC,\n  updateStatusTC\n} from \"redux/reducers/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type MapStateToPropsType = {\n  profile: ProfileItemPropsType | null\n  status: string\n  authorizedUserId: number | null\n  isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n  //setUserProfile: (profile: ProfileItemPropsType) => void\n  getProfileTC: (userId: string) => void\n  getStatusTC: (userId: string) => void\n  updateStatusTC: (status: string) => void\n  saveFileTC:(file:File)=>void\n}\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype DataContainerComponentType = RouteComponentProps<PathParamsType> & ProfileContainerType\n\nclass ProfileContainer extends React.Component<DataContainerComponentType> {\n  constructor(props: DataContainerComponentType) {\n    super(props);\n  }\n\n  refreshProfile(){\n    let userId = this.props.match.params.userId\n    if (!userId) {\n      userId = this.props.authorizedUserId + ''\n    }\n    this.props.getProfileTC(userId)\n    this.props.getStatusTC(userId)\n  }\n  componentDidMount() {\n    this.refreshProfile()\n  }\n  componentDidUpdate(prevProps: Readonly<DataContainerComponentType>, prevState: Readonly<{}>, snapshot?: any) {\n    if(this.props.match.params.userId != prevProps.match.params.userId){\n      this.refreshProfile()\n    }\n  }\n\n  render() {\n\n    return (\n      <Profile {...this.props} isOwner={!this.props.match.params.userId} saveFile={this.props.saveFileTC}/>\n    )\n  }\n};\nconst mapStateToProps = (state: RootTypeReduxState): MapStateToPropsType => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.id,\n  isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\n  getProfileTC,\n  getStatusTC,\n  updateStatusTC,\n  saveFileTC\n}), withAuthRedirect, withRouter)(ProfileContainer)\n"],"names":["Textarea","input","meta","props","hasError","error","touched","className","s","Contacts","contacts","Object","entries","map","item","ProfileInfo","profile","Preloader","src","photos","small","defaultImage","alt","isOwner","type","onChange","e","currentTarget","files","length","saveFile","Post","message","likeCounts","maxLengthCreatorValidate","maxLengthCreator","ReduxAddNewPostForm","reduxForm","form","onSubmit","handleSubmit","createField","required","MyPosts","React","postElement","posts","p","id","values","addPost","newPostBody","MyPostsContainer","dispatch","useDispatch","useSelector","state","profilePage","newPost","addPostActionCreator","Profile","status","updateStatusTC","ProfileContainer","userId","this","match","params","authorizedUserId","getProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","saveFileTC","compose","connect","auth","isAuth","withAuthRedirect","withRouter"],"sourceRoot":""}